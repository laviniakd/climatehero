// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
)

// CheckItemHandlerFunc turns a function with the right signature into a check item handler
type CheckItemHandlerFunc func(CheckItemParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CheckItemHandlerFunc) Handle(params CheckItemParams) middleware.Responder {
	return fn(params)
}

// CheckItemHandler interface for that can handle valid check item params
type CheckItemHandler interface {
	Handle(CheckItemParams) middleware.Responder
}

// NewCheckItem creates a new http.Handler for the check item operation
func NewCheckItem(ctx *middleware.Context, handler CheckItemHandler) *CheckItem {
	return &CheckItem{Context: ctx, Handler: handler}
}

/*CheckItem swagger:route POST /checkItem checkItem

Checks an item

*/
type CheckItem struct {
	Context *middleware.Context
	Handler CheckItemHandler
}

func (o *CheckItem) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCheckItemParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CheckItemBody check item body
// swagger:model CheckItemBody
type CheckItemBody struct {

	// email
	Email string `json:"email,omitempty"`

	// item
	Item string `json:"item,omitempty"`
}

// Validate validates this check item body
func (o *CheckItemBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CheckItemBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckItemBody) UnmarshalBinary(b []byte) error {
	var res CheckItemBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
